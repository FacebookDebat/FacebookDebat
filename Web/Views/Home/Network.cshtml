<style>
    path.link {
        fill: none;
        stroke: #999;
        stroke-width: 1px;
    }

    circle {
        fill: #ccc;
        stroke: #fff;
        stroke-width: 1.5px;
    }

    text {
        fill: #000;
        font: 10px sans-serif;
        pointer-events: none;
    }

    .node.page circle {
        fill: #00F;
        stroke: #00F;
    }
    .node.user circle {
        fill: #0F0;
        stroke: #0F0;
    }
</style>
<br />

<script>
    var width = 960,
        height = 500;

    var svg = d3.select(".body-content").append("svg")
        .attr("width", width)
        .attr("height", height)
        .attr("id", "svg");

    // get the data
    d3.json("/Statistics/GetGraph", function (error, graph) {
        var nodes = {};
        graph.nodes.forEach(function (node) {
            nodes[node.id + "-" + node.group] = node;
        });

        var links = [];

        // Compute the distinct nodes from the links.
        graph.links.forEach(function (link) {
            if (!nodes[link.page + "-page"])
                debugger;
            if (!nodes[link.user + "-user"])
                debugger;
            links.push({
                source: nodes[link.user + "-user"],
                target: nodes[link.page + "-page"],
                value: link.value
            });
        });


        var force = d3.layout.force()
            .nodes(d3.values(nodes))
            .links(links)
            .size([width, height])
            .linkDistance(400)
            .charge(-4000)
            .on("tick", tick)
            .start();


        // build the arrow.
/*        svg.append("svg:defs").selectAll("marker")
            .data(["end"])      // Different link/path types can be defined here
          .enter().append("svg:marker")    // This section adds in the arrows
            .attr("id", String)
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 15)
            .attr("refY", -1.5)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
          .append("svg:path")
            .attr("d", "M0,-5L10,0L0,5");
            */
        // add the links and the arrows
        var path = svg.append("svg:g").selectAll("path")
            .data(force.links())
          .enter().append("svg:path")
        //    .attr("class", function(d) { return "link " + d.type; })
            .attr("class", "link")
            .attr("marker-end", "url(#end)");

        // define the nodes
        var node = svg.selectAll(".node")
            .data(force.nodes())
          .enter().append("g")
            .attr("class", function (x) { return "node " + x.group; })
            .on("click", click)
            .on("dblclick", dblclick)
            .call(force.drag);

        // add the nodes
        node.append("circle")
            .attr("r", 5);

        // add the text
        node.append("text")
            .attr("x", 12)
            .attr("dy", ".35em")
            .text(function (d) { return d.name; });

        // add the curvy lines
        function tick() {
            path.attr("d", function (d) {
                var dx = d.target.x - d.source.x,
                    dy = d.target.y - d.source.y,
                    dr = Math.sqrt(dx * dx + dy * dy);
                return "M" +
                    d.source.x + "," +
                    d.source.y + "A" +
                    dr + "," + dr + " 0 0,1 " +
                    d.target.x + "," +
                    d.target.y;
            });

            node
                .attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                });
        }

        // action to take on mouse click
        function click() {
            d3.select(this).select("text").transition()
                .duration(750)
                .attr("x", 22)
                .style("fill", "steelblue")
                .style("stroke", "lightsteelblue")
                .style("stroke-width", ".5px")
                .style("font", "20px sans-serif");
            d3.select(this).select("circle").transition()
                .duration(750)
                .attr("r", 16)
                .style("fill", "lightsteelblue");
        }

        // action to take on mouse double click
        function dblclick() {
            d3.select(this).select("circle").transition()
                .duration(750)
                .attr("r", 6)
                .style("fill", "#ccc");
            d3.select(this).select("text").transition()
                .duration(750)
                .attr("x", 12)
                .style("stroke", "none")
                .style("fill", "black")
                .style("stroke", "none")
                .style("font", "10px sans-serif");
        }


        var omnaEl, dragData = null;
        function window_onload() {
            omnaEl = document.getElementById("svg")
            if (window.addEventListener) {
                document.body.addEventListener('mousedown', startDrag, false);
                document.body.addEventListener('mousemove', drag, false);
                document.body.addEventListener('mouseup', stopDrag, false);
            }
            else if (window.attachEvent) {
                document.body.attachEvent('onmousedown', startDrag);
                document.body.attachEvent('onmousemove', drag);
                document.body.attachEvent('onmouseup', stopDrag);
            }
            var width = omnaEl.getAttribute("width");
            var height = omnaEl.getAttribute("height");
            var x = -500;
            var y = 0;
            omnaEl.setAttribute("viewBox", x + " " + y + " " + width + " " + height);

        }


        function startDrag(ev) {
            if (!dragData) {
                ev = ev || event;
                dragData = {
                    mouseX: ev.clientX,
                    mouseY: ev.clientY,
                    elementX: omnaEl.viewBox.baseVal.x,
                    elementY: omnaEl.viewBox.baseVal.y
                };
            };
        }
        function drag(ev) {
            if (dragData) {
                ev = ev || event;
                var width = omnaEl.getAttribute("width");
                var height = omnaEl.getAttribute("height");
                var x = dragData.elementX + (dragData.mouseX - ev.clientX);
                var y = dragData.elementY + (dragData.mouseY - ev.clientY);
                omnaEl.setAttribute("viewBox", x + " " + y + " " + width + " " + height);
            }
        }
        function stopDrag(ev) {
            if (dragData) {
                dragData = null;
            }
        }

        window_onload();

    });

</script>
